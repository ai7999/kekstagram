import { getRandomPositiveInteger, getRandomArrayElement } from "./util.js";

const DESCRIPTION_WORDS_1 = [
  'Красота',
  'Свет',
  'Природа',
  'Мир',
];

const DESCRIPTION_WORDS_2 = [
  'Весна',
  'Осень',
  'Лето',
  'Зима',
];

const MESSAGES = [
  'Всё отлично!',
  'В целом всё неплохо. Но не всё.',
  'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
  'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
  'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
  'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!',
];

const NAMES = [
  'Аня',
  'Петя',
  'Саша',
  'Джон',
  'Борис',
  'Света',
];

const MIN_RANDOM = 1;
const MAX_RANDOM = 25;

const SIMILAR_PHOTO_COUNT = 25;


//Подумать, как обернуть в функцию. Массив для идентификаторов от 1 до 25 без повторения
/*
comments, массив объектов — список комментариев, оставленных другими пользователями к этой фотографии. Количество комментариев к каждой фотографии вы определяете на своё усмотрение. Все комментарии генерируются случайным образом. Пример описания объекта с комментарием:
{
  id: 135,
  avatar: 'img/avatar-6.svg',
  message: 'В целом всё неплохо. Но не всё.',
  name: 'Артём',
}
У каждого комментария есть идентификатор — id — случайное число. Идентификаторы не должны повторяться.
Поле avatar — это строка, значение которой формируется по правилу img/avatar-{{случайное число от 1 до 6}}.svg. Аватарки подготовлены в директории img.
Для формирования текста комментария — message — вам необходимо взять одно или два случайных предложения из представленных ниже:
Всё отлично!
В целом всё неплохо. Но не всё.
Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.
Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.
Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.
Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!

Имена авторов также должны быть случайными. Набор имён для комментаторов составьте сами. Подставляйте случайное имя в поле name.
*/
const createComment = (index) => ({
  id: index,
  avatar: 'img/avatar-' + getRandomPositiveInteger(1, 6) + '.svg',
  message: getRandomArrayElement(MESSAGES),
  name: getRandomArrayElement(NAMES),
});
/*
const similarComments = (comments_length) => {
  const comment = Array.from({ comments_length }, createComment);
  return comment;
}
*/
/*
Структура каждого объекта должна быть следующей:
id, число — идентификатор описания. Это число от 1 до 25. Идентификаторы не должны повторяться.
url, строка — адрес картинки вида photos/{{i}}.jpg, где {{i}} — это число от 1 до 25. Адреса картинок не должны повторяться.
description, строка — описание фотографии. Описание придумайте самостоятельно.
likes, число — количество лайков, поставленных фотографии. Случайное число от 15 до 200.
comments, массив объектов — список комментариев, оставленных другими пользователями к этой фотографии. Количество комментариев к каждой фотографии вы определяете на своё усмотрение. Все комментарии генерируются случайным образом. Пример описания объекта с комментарием:
{
  id: 135,
  avatar: 'img/avatar-6.svg',
  message: 'В целом всё неплохо. Но не всё.',
  name: 'Артём',
}
*/
const createPhoto = (index) => ({
  id: index,
  url: 'photos/' + index + '.jpg',
  description: getRandomArrayElement(DESCRIPTION_WORDS_1) + '. ' + getRandomArrayElement(DESCRIPTION_WORDS_2),
  likes: getRandomPositiveInteger(15, 200),
  comments: Array.from({ length: getRandomPositiveInteger(0, 6) }, (_, commentIndex) => createComment(commentIndex + 1)),
});

const getSimilarPhotos = () => Array.from({ length: SIMILAR_PHOTO_COUNT }, (_, pictureIndex) => createPhoto(pictureIndex + 1));

export { getSimilarPhotos };
